name: Docker Image CI

on:
  workflow_run:
    workflows: ["Terraform CICD"]
    types:
      - completed

permissions:
  contents: read
  packages: write
  id-token: write
  actions: read 

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      loginServer: ${{ steps.tf.outputs.loginServer }}
      username: ${{ steps.tf.outputs.username }}
      password: ${{ steps.tf.outputs.password }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install jq
      run: sudo apt-get install jq 

    - name: Download artifact using GitHub API
      run: |
         # Define the GitHub API URL
         API_URL="https://api.github.com/repos/Tanisha-221/Terraform-Microservices-CI-CD-Pipeline/actions/runs/${{ github.event.workflow_run.id }}/artifacts"
    
         # Fetch artifact ID using GitHub API
         artifact_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $API_URL | jq -r '.artifacts[0].id')
    
         # Download the artifact
         curl -L -o terraform-output.zip -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/Tanisha-221/Terraform-Microservices-CI-CD-Pipeline/actions/artifacts/$artifact_id/zip"
    
         # List the files in the downloaded zip before extracting
         unzip -l terraform-output.zip  # This will list the contents of the zip file
    
         # Unzip the artifact
         unzip terraform-output.zip -d ./downloaded-artifacts

         # Verify contents of the artifact
         ls -lh ./downloaded-artifacts

    - name: Verify combined_artifacts.zip exists
      run: |
        # check if the combined_artifacts.zip file exists before unzipping
        if [ ! -f ./downloaded-artifacts/combined_artifacts.zip ]; then
          echo "🤷‍♀️ combined_artifacts.zip not found!"
          exit 1
        else
          echo "😁 combined_artifacts.zip found!"
        fi

    - name: Unzip combined artifacts 
      run: |
        unzip ./downloaded-artifacts/combined_artifacts.zip -d ./downloaded-artifacts

    - name: Verify contents of download artifacts
      run: |
        ls -lh ./downloaded-artifacts

    - name: List files in downloaded artifacts directory (debugging)
      run: ls -R ./downloaded-artifacts

    - name: Parse and use the downloaded Terraform output and Publish Profile
      run: |
         cat ./downloaded-artifacts/combined_artifacts/terraform-output.json
         cat ./downloaded-artifacts/combined_artifacts/publish-profile.json

    - name: Parse ACR values from Terraform output
      id: tf
      run: |
        # Ensure the file exists and is properly downloaded
        if [[ ! -f ./downloaded-artifacts/combined_artifacts/terraform-output.json ]]; then
          echo "Terraform output file not found!"
          exit 1
        fi

        # Extract the ACR login server, username, and password from the downloaded JSON
        ACR_LOGIN_SERVER=$(jq -r '.acr_login_server.value' ./downloaded-artifacts/combined_artifacts/terraform-output.json)
        ACR_USERNAME=$(jq -r '.acr_username.value' ./downloaded-artifacts/combined_artifacts/terraform-output.json)
        ACR_PASSWORD=$(jq -r '.acr_password.value' ./downloaded-artifacts/combined_artifacts/terraform-output.json)

        echo "loginServer=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
        echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
        echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

    - name: Setup Node.js environment
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build project
      run: npm run build

    - name: Run ESLint
      run: npm run lint
      continue-on-error: true

    - name: Run unit tests with Vitest
      run: npm run test:unit
      continue-on-error: true

    - name: Run integration tests with Vitest
      run: npm run test:integration
      continue-on-error: true

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure Container Registry
      run: echo "${{ steps.tf.outputs.password }}" | docker login ${{ steps.tf.outputs.loginServer }} -u ${{ steps.tf.outputs.username }} --password-stdin

    - name: Install SonarQube Scanner
      run: npm install -g sonar-scanner

    - name: Run SonarQube Scanner
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        sonar-scanner 
      continue-on-error: true
    
    - name: Extract Metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ steps.tf.outputs.loginServer }}/my-nodejs-app
        tags: |
          latest
          ${{ github.sha }}

    - name: Build Docker image
      uses: docker/build-push-action@v4    
      with:
        context: .
        file: ./dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILDKIT_INLINE_CACHE=1

    - name: Docker Scan
      run: docker scan ${{ steps.meta.outputs.tags }}
      continue-on-error: true

    - name: Upload ACR credentials as artifacts
      uses: actions/upload-artifact@v4
      with:
         name: acr-credentials
         path: |
           Infra-Terraform/terraform-outputs/terraform-output.json

    - name: Upload Terraform Output artifact
      uses: actions/upload-artifact@v4
      with:
         name: terraform-output
         path: ./downloaded-artifacts/combined_artifacts/terraform-output.json