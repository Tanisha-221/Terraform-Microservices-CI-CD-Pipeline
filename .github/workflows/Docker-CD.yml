name: Docker Image CD

on:
  workflow_run:
    workflows: ["Docker Image CI"]
    types:
      - completed

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Download ACR Credentials artifact using GitHub API
      run: |
          # Fetch the artifact using the GitHub API
          API_URL="https://api.github.com/repos/Tanisha-221/Terraform-Microservices-CI-CD-Pipeline/actions/runs/${{ github.event.workflow_run.id }}/artifacts"
          
          # Get the artifact ID
          artifact_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $API_URL | jq -r '.artifacts[0].id')

          if [ -z "$artifact_id" ]; then
            echo "No artifact found!"
            exit 1
          fi

          # Download the artifact zip file
          curl -L -o terraform-output.zip -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/Tanisha-221/Terraform-Microservices-CI-CD-Pipeline/actions/artifacts/$artifact_id/zip"

      # Step 3: Unzip and Extract ACR credentials
    - name: Unzip and Extract ACR credentials
      run: |
          unzip terraform-output.zip -d ./downloaded-artifacts
          ls -lh ./downloaded-artifacts

          # Check if acr-credentials.json exists
          if [ ! -f ./downloaded-artifacts/acr-credentials.json ]; then
            echo "ACR credentials file not found!"
            exit 1
          fi

          # Parse credentials from the JSON file
          ACR_LOGIN_SERVER=$(jq -r '.loginServer' ./downloaded-artifacts/acr-credentials.json)
          ACR_USERNAME=$(jq -r '.username' ./downloaded-artifacts/acr-credentials.json)
          ACR_PASSWORD=$(jq -r '.password' ./downloaded-artifacts/acr-credentials.json)

          # Output the values to use later in the pipeline
          echo "loginServer=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
          
    - name: List files in downloaded artifacts directory (debugging)
      run: ls -R ./downloaded-artifacts

      # Step 4: Docker Login to Azure Container Registry
    - name: Docker Login to Azure Container Registry
      run: |
        echo ${{ steps.deploy.outputs.password }} | docker login ${{ steps.deploy.outputs.loginServer }} -u ${{ steps.deploy.outputs.username }} --password-stdin
      env:
        ACR_USERNAME: ${{ steps.deploy.outputs.username }}
        ACR_PASSWORD: ${{ steps.deploy.outputs.password }}
        ACR_LOGIN_SERVER: ${{ steps.deploy.outputs.loginServer }}

      # Optional Docker Build steps can be added here, e.g., to build and push Docker images.
    - name: Validate publish-profile.json
      run: |
        echo "📄 Verifying JSON format for publish-profile.json..."
        jq empty publish-profile.json || { echo "❌ publish-profile.json is invalid JSON!"; exit 1; }

    - name: Extract publish profile details
      run: |
        echo "📄 Extracting publish profile details..."
        # Extract the publish profile value
        PUBLISH_PROFILE=$(jq -r '.[0].publishProfile' publish-profile.json)

        # Set the publish profile as an environment variable
        echo "publish_profile=$PUBLISH_PROFILE" >> $GITHUB_ENV

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'T-node-web-app'
        slot-name: 'production'
        publish-profile: ${{ env.publish_profile }}  # Use the extracted publish profile here
        images: ${{ steps.deploy.outputs.loginServer }}/my-nodejs-app:${{ github.sha }}