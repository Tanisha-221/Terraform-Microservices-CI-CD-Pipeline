name: Docker Image CD

on:
  push:
      branches: 
         - development
  
jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # - name: Download artifact using GitHub API
    #   run: |
        # Define the GitHub API URL
    #    API_URL="https://api.github.com/repos/Tanisha-221/Terraform-Microservices-CI-CD-Pipeline/actions/runs/${{ github.event.workflow_run.id }}/artifacts"
    
    #    # Fetch artifact ID using GitHub API
    #    artifact_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $API_URL | jq -r '.artifacts[0].id')
    
     #   # Download the artifact
      #  curl -L -o terraform-output.zip -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/Tanisha-221/Terraform-Microservices-CI-CD-Pipeline/actions/artifacts/$artifact_id/zip"
    
    #    # Verify the downloaded file size
    #    FILE_SIZE=$(stat --format=%s terraform-output.zip)
    #    if [ $FILE_SIZE -lt 100 ]; then
    #       echo "Downloaded file is empty or corrupted!"
    #      exit 1
    #    else
    #       echo "File size looks good: $FILE_SIZE bytes."
    #    fi

    #    # List the contents of the ZIP file to check if it's a valid ZIP
     #   unzip -l terraform-output.zip || { echo "Failed to list contents, this is not a valid zip file."; exit 1; }
    
        # Unzip the artifact
    #    unzip terraform-output.zip -d ./downloaded-artifacts

     #   # Verify contents of the artifact
    #    ls -lh ./downloaded-artifacts


    - name: Fetch publish profile using Azure CLI
      run: |
        echo "Fetching publish profile from Azure..."
        az webapp deployment list-publishing-profiles \
          --name T-node-web-app \
          --resource-group T-microservices-project \
          --query "[0].publishProfile" \
          --output json > publish-profile.json

        # Verify the downloaded publish profile
        ls -lh publish-profile.json
        cat publish-profile.json
  
      env:
        AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    - name: Validate publish-profile.json
      run: |
        echo "📄 Verifying JSON format for publish-profile.json..."
        jq empty publish-profile.json || { echo "❌ publish-profile.json is invalid JSON!"; exit 1; }

    - name: Extract publish profile details
      run: |
        echo "📄 Extracting publish profile details..."
        # Extract the publish profile value
        PUBLISH_PROFILE=$(jq -r '.[0].publishProfile' publish-profile.json)

        # Set the publish profile as an environment variable
        echo "publish_profile=$PUBLISH_PROFILE" >> $GITHUB_ENV

    - name: Deploy to Azure Web App
      id: deploy-to-webapp
      uses: azure/webapps-deploy@v2
      with:
        app-name: 'T-node-web-app'
        slot-name: 'production'
        publish-profile: ${{ env.publish_profile }}  # Use the extracted publish profile here
        images: ${{ secrets.ACR_LOGIN_SERVER }}/my-nodejs-app:${{ github.sha }}
